#!/usr/bin/env perl

# Before running this script, you have to already run the import-* scripts. Also
# install the required CPAN modules.

use 5.010001;
use strict;
use warnings;
use FindBin '$Bin';

use Business::Inventory::Valuation;
use DBIx::Connect::MySQL;
use List::BinarySearch 'binsearch_pos';
use Progress::Any '$progress';
use Progress::Any::Output 'TermProgressBarColor';

# load exchange rates
my %Fx_Rates; # key = currency, val = [ [timestamp1, rate1-against-USD], [timestamp2, rate2], ... ]

for my $filename (glob "$Bin/../data/fxrates/*.csv") {
    my ($cur) = $filename =~ /^(\w+)-/;
    $Fx_Rates{$cur} = [];
    open my $fh, "<", $filename;
    while (my $row = <$fh>) {
        $row =~ /"([^"]+)","([^"]+)"/ or die;
        push @{ $Fx_Rates{$cur} }, [$1, $2];
    }
}

my $dbh = DBIx::Connect::MySQL->connect(
    "dbi:mysql:database=mtgox", undef, undef, {RaiseError=>1});

my ($num_recs) = $dbh->selectrow_array("SELECT COUNT(*) FROM _Trade2");
$progress->target($num_recs);

my $sth = $dbh->prepare("SELECT * FROM _Trade2 ORDER BY _rowid");
$sth->execute;

my %Balance_USD_By_User__;
my %Balance_BTC_By_User__;
my %Inventory_By_User__;

my $i = 0;
while (my $row = $sth->fetchrow_hashref) {
    $i++;
    $progress->update(message => "Processing row #$i");
    next unless $row->{User__};

    $Balance_USD_By_User__{my $key = $hashinfo->[1];
        $hashinfo->[0]{$key} //= {
            First_Trade_Stamp => $row->{Stamp},
            Num_Trades => 0,
            Num_Buys   => 0,
            Num_Sells  => 0,
            Bitcoin_Volume       => 0,
            Bitcoin_Volume_Sells => 0,
            Bitcoin_Volume_Buys  => 0,
        };
        my $hash = $hashinfo->[0]{$key};

        $hash->{Last_Trade_Stamp} = $row->{Stamp};
        $hash->{Num_Trades}++;
        $hash->{Num_Buys}++  if $row->{Type} eq 'buy';
        $hash->{Num_Sells}++ if $row->{Type} eq 'sell';
        $hash->{Bitcoin_Volume}       += $row->{Bitcoins};
        $hash->{Bitcoin_Volume_Buys}  += $row->{Bitcoins} if $row->{Type} eq 'buy';
        $hash->{Bitcoin_Volume_Sells} += $row->{Bitcoins} if $row->{Type} eq 'sell';
    }
}

$progress->target( $progress->target + keys(%Trader_By_Index));
$sth = $dbh->prepare("INSERT INTO _Trader_Index_Stats (`Index`, First_Trade_Stamp,Last_Trade_Stamp, Num_Trades,Num_Sells,Num_Buys, Bitcoin_Volume,Bitcoin_Volume_Sells,Bitcoin_Volume_Buys) VALUES (?, ?,?, ?,?,?, ?,?,?)");
for my $index (sort keys %Trader_By_Index) {
    $progress->update(message => "Inserting stat for Trader Index #$index");
    my $hash = $Trader_By_Index{$index};
    #use DD; dd $hash;
    $sth->execute(
        $index,
        $hash->{First_Trade_Stamp}, $hash->{Last_Trade_Stamp},
        $hash->{Num_Trades}, $hash->{Num_Sells}, $hash->{Num_Buys},
        $hash->{Bitcoin_Volume}, $hash->{Bitcoin_Volume_Sells}, $hash->{Bitcoin_Volume_Buys},
    );
}

$progress->target( $progress->target + keys(%Trader_By_User__));
$sth = $dbh->prepare("INSERT INTO _Trader_User_Stats (User__, First_Trade_Stamp,Last_Trade_Stamp, Num_Trades,Num_Sells,Num_Buys, Bitcoin_Volume,Bitcoin_Volume_Sells,Bitcoin_Volume_Buys) VALUES (?, ?,?, ?,?,?, ?,?,?)");
for my $user (sort keys %Trader_By_User__) {
    $progress->update(message => "Inserting stat for Trader User__ #$user");
    my $hash = $Trader_By_User__{$user};
    $sth->execute(
        $user,
        $hash->{First_Trade_Stamp}, $hash->{Last_Trade_Stamp},
        $hash->{Num_Trades}, $hash->{Num_Sells}, $hash->{Num_Buys},
        $hash->{Bitcoin_Volume}, $hash->{Bitcoin_Volume_Sells}, $hash->{Bitcoin_Volume_Buys},
    );
}

$progress->finish;
