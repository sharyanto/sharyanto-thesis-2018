#!/usr/bin/env perl

# Before running this script, you have to already run the import-* scripts and
# extra.sql. Also install the required CPAN modules.

use 5.010001;
use strict;
use warnings;
use FindBin '$Bin';
use Log::ger;

use Business::Inventory::Valuation;
use DBIx::Connect::MySQL;
use List::BinarySearch 'binsearch_pos';
use Progress::Any '$progress';
use Progress::Any::Output 'TermProgressBarColor';

my $dbh = DBIx::Connect::MySQL->connect(
    "dbi:mysql:database=mtgox", undef, undef, {RaiseError=>1});
$dbh->do("SET time_zone = '+00:00'");

#my $sth = $dbh->prepare("SELECT *, UNIX_TIMESTAMP(Stamp) AS Unix_Time FROM _Trade2 ORDER BY Stamp");
#$sth->execute;

my $sth = $dbh->prepare("SELECT *, UNIX_TIMESTAMP(Stamp) AS Unix_Time FROM _Trade2 ORDER BY Stamp LIMIT 1000");
$sth->execute;

my %Balances_Jpy     ; # key = Index, value = fiat balance in JPY
my %Balances_Bitcoins; # key = Index, value = bitcoin balance
my %Inventories      ; # key = Index, value = Business::Inventory::Valuation object
my %Paper_Gains           ; # key = Index
my %Total_Realized_Gains  ; # key = Index

my $sth_set_balances       = $dbh->prepare("UPDATE _Trade2 SET Balance_Bitcoins=?, Balance_Jpy=? WHERE _rowid=?");
my $sth_set_paper_gain     = $dbh->prepare("UPDATE _Trade2 SET Paper_Gain=? WHERE _rowid=?");
my $sth_set_realized_gains = $dbh->prepare("UPDATE _Trade2 SET Tx_Realized_Gain=?, Total_Realized_Gain=? WHERE _rowid=?");

my $i = 0;
while (my $row = $sth->fetchrow_hashref) {
    $i++;
    next if $row->{Bitcoins} == 0; # a couple of rows has this, probably due to rounding. ignore these rows.

    $progress->update(message => "Processing row #$i");

    my $rowid = $row->{_rowid};
    my $idx = $row->{Index};

    $Balances_Jpy{$idx} //= 0;
    $Balances_Bitcoins{$idx} //= 0;
    $Inventories{$idx} //= Business::Inventory::Valuation->new(method => 'LIFO');
    $Paper_Gains{$idx} //= 0;
    $Total_Realized_Gains{$idx} //= 0;

    my $money = $row->{Money};
    my $price = $row->{Money} / $row->{Bitcoins};

    if ($row->{Type} eq 'buy') {
        my $nett_bitcoins = $row->{Bitcoins} - $row->{Bitcoin_Fee};
        my $nett_jpy = $row->{Money_Jpy};
        $Balances_Bitcoins{$idx} += $nett_bitcoins;
        $Balances_Jpy     {$idx} -= $nett_jpy;
        $sth_set_balances->execute($Balances_Bitcoins{$idx}, $Balances_Jpy{$idx}, $rowid);

        # TODO: balance can already be negative when buying
        $Inventories{$idx}->buy($nett_bitcoins, $price);
        my (undef, $avg_purchase_price) = $Inventories{$idx}->summary;
        my $paper_gain = $Balances_Bitcoins{$idx} * ($price - $avg_purchase_price);
        $sth_set_paper_gain->execute($paper_gain, $rowid);

        # use previous value for total realized gain
        $sth_set_realized_gains->execute(0, $Total_Realized_Gains{$idx}, $rowid);
    } else { # sell
        my (undef, $avg_purchase_price1) = $Inventories{$idx}->summary;

        my $nett_bitcoins = $row->{Bitcoins};
        my $nett_jpy = $row->{Money_Jpy} - $row->{Money_Fee_Jpy};
        $Balances_Bitcoins{$idx} -= $nett_bitcoins;
        $Balances_Jpy     {$idx} += $nett_jpy;
        $sth_set_balances->execute($Balances_Bitcoins{$idx}, $Balances_Jpy{$idx}, $rowid);

        if ($Balances_Bitcoins{$idx} >= 0) { # if we oversell, we can't calculate gains
            $Inventories{$idx}->sell($nett_bitcoins, $price);

            if (defined $avg_purchase_price1) {
                my $tx_realized_gain = $nett_bitcoins * ($price - $avg_purchase_price1);
                $Total_Realized_Gains{$idx} += $tx_realized_gain;
                $sth_set_realized_gains->execute($tx_realized_gain, $Total_Realized_Gains{$idx}, $rowid);
            }

            my (undef, $avg_purchase_price2) = $Inventories{$idx}->summary;
            my $paper_gain = defined($avg_purchase_price2) ?
                $Balances_Bitcoins{$idx} * ($price - $avg_purchase_price2) : undef;
            $sth_set_paper_gain->execute($paper_gain, $rowid);
        }
    }
}

$progress->finish;
