#!/usr/bin/env perl

# Before running this script, you have to already run the import-* scripts and
# extra.sql. Also install the required CPAN modules.

use 5.010001;
use strict;
use warnings;
use FindBin '$Bin';
use Log::ger;

use Business::Inventory::Valuation;
use DBIx::Connect::MySQL;
use List::BinarySearch 'binsearch_pos';
use Perinci::CmdLine::Any;
use Progress::Any '$progress';
use Progress::Any::Output 'TermProgressBarColor';

our %SPEC;

$SPEC{app} = {
    v => 1.1,
    args => {
        include_users => {
            'x.name.is_plural' => 1,
            'x.name.singular' => 'include_user',
            schema => ['array*', of=>'posint*', 'x.perl.coerce_rules'=>['str_comma_sep']],
            tags => ['category:testing'],
        },
    },
};
sub app {
    my %args = @_;

    my $dbh = DBIx::Connect::MySQL->connect(
        "dbi:mysql:database=mtgox", undef, undef, {RaiseError=>1});
    $dbh->do("SET time_zone = '+00:00'");

    # this is just too big, we need to split it per Index value
    #my $sth = $dbh->prepare("SELECT *, UNIX_TIMESTAMP(Stamp) AS Unix_Time FROM _Trade2 ORDER BY Stamp");

    my @Indexes;
    if ($args{include_users}) {
        @Indexes = @{ $args{include_users} };
    } else {
        my $sth = $dbh->prepare("SELECT DISTINCT `Index` FROM _Trade2");
        $sth->execute;
        while (my @row = $sth->fetchrow_array) { push @Indexes, $row[0] }
    }

    my $sth_set_balances       = $dbh->prepare("UPDATE _Trade2 SET Bitcoins_Change=?, Balance_Bitcoins=?, Balance_Jpy=? WHERE _rowid=?");
    my $sth_set_paper_gains    = $dbh->prepare("UPDATE _Trade2 SET Balance_Bitcoins_Book_Value=?, Balance_Bitcoins_Market_Value=?, Avg_Purchase_Price=?, Paper_Gain=? WHERE _rowid=?");
    my $sth_set_realized_gains = $dbh->prepare("UPDATE _Trade2 SET Tx_Realized_Gain=?, Total_Realized_Gain=? WHERE _rowid=?");
    my $sth_set_total_value = $dbh->prepare("UPDATE _Trade2 SET Tx_Realized_Gain=?, Total_Realized_Gain=? WHERE _rowid=?");

    my %User_Has_Bought  ; # key = Index, value = bool
    my %Balances_Jpy     ; # key = Index, value = fiat balance in JPY
    my %Inventories      ; # key = Index, value = Business::Inventory::Valuation object
    my %Total_Realized_Gains  ; # key = Index

    $progress->target(~~@Indexes);
    my $i = 0;
    for my $idx (@Indexes) {
        $i++;
        $progress->update(message => "Processing user ID #$idx", pos=>$i);
        my $sth = $dbh->prepare("SELECT *, UNIX_TIMESTAMP(Stamp) AS Unix_Time FROM _Trade2 WHERE `Index`=? ORDER BY _rowid");
        $sth->execute($idx);

        my @rows;
        while (my $row = $sth->fetchrow_hashref) {
            next if $row->{Bitcoins} == 0; # a couple of rows has this, probably due to rounding. ignore these rows.
            push @rows, $row;
        }

        for my $row (@rows) {
            my $rowid = $row->{_rowid};
            $progress->update(
                message => "Processing row ID ($rowid) # (user ID #$idx)",
                pos => $i,
            );

            # we shall begin balance when user first bought
            $User_Has_Bought{$idx}++ if $row->{Type} eq 'buy';
            next unless $User_Has_Bought{$idx};

            $Balances_Jpy{$idx} //= 0;
            $Inventories{$idx} //= Business::Inventory::Valuation->new(
                method => 'weighted average', allow_negative_inventory=>1);
            $Total_Realized_Gains{$idx} //= 0;

            my $biv = $Inventories{$idx};

            # current bitcoin price in Jpy
            my $price = $row->{Money_Jpy} / $row->{Bitcoins};

            #log_trace "%s", $row;

            if ($row->{Type} eq 'buy') {

                my $nett_bitcoins = $row->{Bitcoins} - $row->{Bitcoin_Fee};
                $biv->buy($nett_bitcoins, $price) if $nett_bitcoins > 0;
                my $nett_jpy = $row->{Money_Jpy};
                $Balances_Jpy{$idx} -= $nett_jpy;
                $sth_set_balances->execute(
                    $nett_bitcoins, $biv->units, $Balances_Jpy{$idx}, $rowid);
                my $avg_purchase_price = $biv->average_purchase_price;
                my $book_value   = $biv->units * $avg_purchase_price;
                my $market_value = $biv->units * $price;
                $sth_set_paper_gains->execute(
                    $book_value,
                    $market_value,
                    $avg_purchase_price,
                    ($market_value - $book_value), # paper gain
                    $rowid,
                );

                log_trace "BUY: Index=%6d | bitcoins=%.8f",
                    $idx, $row->{Bitcoins};

                # use previous value for total realized gain
                $sth_set_realized_gains->execute(0, $Total_Realized_Gains{$idx}, $rowid);

            } else { # sell

                my ($profit1, $profit2, $actual_units_sold) = $biv->sell($row->{Bitcoins}, $price);
                # since there might be overselling, we only add money balance from
                # units actually sold
                my $fraction = $actual_units_sold / $row->{Bitcoins};
                my $nett_jpy = $fraction * ($row->{Money_Jpy} - $row->{Money_Fee_Jpy});
                my $nett_profit = defined($profit1) ? $profit1 - $fraction*$row->{Money_Fee_Jpy} : undef;
                log_trace "SELL: Index=%6d | bitcoins=%.8f, actual_units_sold=%.8f, fraction=%.5f, nett_profit=%.3f",
                    $idx, $row->{Bitcoins}, $actual_units_sold, $fraction, $nett_profit;

                $Balances_Jpy{$idx} += $nett_jpy;
                $sth_set_balances->execute(-$actual_units_sold, $biv->units, $Balances_Jpy{$idx}, $rowid);

                {
                    my $avg_purchase_price;
                    my $book_value;
                    my $market_value;

                    if ($biv->units) {
                        $avg_purchase_price = $biv->average_purchase_price;
                        $book_value   = $biv->units * $avg_purchase_price;
                        $market_value = $biv->units * $price;
                    } else {
                        $avg_purchase_price = undef;
                        $book_value = 0;
                        $market_value = 0;
                    }
                    $sth_set_paper_gains->execute(
                        $book_value,
                        $market_value,
                        $avg_purchase_price,
                        ($market_value - $book_value), # paper gain
                        $rowid,
                    );
                }

                $Total_Realized_Gains{$idx} += $nett_profit if defined $nett_profit;
                $sth_set_realized_gains->execute(
                    $nett_profit,
                    $Total_Realized_Gains{$idx},
                    $rowid,
                );

            }
        } # for row
    } # for index
    $progress->finish;

    [200];
}

Perinci::CmdLine::Any->new(
    url => '/main/app',
    log => 1,
    log_level => 'debug',
)->run;
