#!/usr/bin/env perl

# Before running this script, please do the following:
#
# 1. Install these modules from CPAN: DBIx::Connect::MySQL, Progress::Any,
#    Progres::Any::Output::TermProgressBarColor, App::nauniq.
#
# 2. Create a MySQL database called `mtgox` and create a ~/.my.cnf configuration
#    file that contains access information to the database, e.g.:
#
#    [client]
#    user=root
#    password=your_db_password
#
# 3. Extract the *.CSV files from the trades.zip inside MtGox2014Leak.zip file
#    into the current directory. Note that for the month 2013-04, the *.CSV
#    files are inside another .zip file and should be extracted into 2013-04/
#    subdirectory.

use 5.010001;
use strict;
use warnings;

use DBIx::Connect::MySQL;
use Progress::Any '$progress';
use Progress::Any::Output 'TermProgressBarColor';

my $dbh = DBIx::Connect::MySQL->connect(
    "dbi:mysql:database=mtgox", undef, undef, {RaiseError=>1});

$dbh->do("
CREATE TABLE IF NOT EXISTS Trade (
    _rowid INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    Id BIGINT NOT NULL,              -- [ 0]
    Stamp DATETIME,                  -- [ 1]
    `Index` INT NOT NULL,            -- [ 2] only in format=2
    User__ CHAR(36),                 -- [ 3] only in format=2
    User_Id_Hash CHAR(36),           -- [ 4]
    Japan CHAR(3) NOT NULL,          -- [ 5]
    Type VARCHAR(4) NOT NULL,        -- [ 6]
    Currency__ CHAR(3) NOT NULL,     -- [ 7]
    Bitcoins DOUBLE NOT NULL,        -- [ 8] amount of bitcoins
    Money DOUBLE NOT NULL,           -- [ 9] amount of money in Currency__
    Money_Rate DOUBLE NOT NULL,      -- [10] exchange rate of Currency__ (e.g.  'USD', or 'EUR') against JPY
    Money_Jpy DOUBLE NOT NULL,       -- [11] amount of money in JPY, = Money * Money_Rate
    Money_Fee DOUBLE NOT NULL,       -- [12] fees in fiat currency (only when type='sell')
    Money_Fee_Rate DOUBLE NOT NULL,  -- [13] like Money_Rate, in Currency__
    Money_Fee_Jpy DOUBLE NOT NULL,   -- [14] = Money_Fee x Money_Fee_Rate
    Bitcoin_Fee DOUBLE NOT NULL,     -- [15] fees in bitcoins (only when type=buy)
    Bitcoin_Fee_Jpy DOUBLE NOT NULL, -- [16] fess in bitcoins in JPY
    User_Country CHAR(2),            -- [17]
    User_State CHAR(2)               -- [18]
) ENGINE='MyISAM'
");

my @csv_files = sort(glob("*.csv"), glob("2013-04/*.csv"));
@csv_files == 62 or die "There needs to be 60 .csv files in the current ".
    "directory, plus 2 .csv files under the 2013-04/ subdirectory ".
    "(you have ".(scalar @csv_files)."). Please ".
    "extract these first from MtGox2014Leak.zip\n";

my $sth = $dbh->prepare("
INSERT INTO Trade (
    Id,Stamp,`Index`,User__,User_Id_Hash,
    Japan,Type,Currency__,Bitcoins,Money,
    Money_Rate,Money_Jpy,Money_Fee,Money_Fee_Rate,Money_Fee_Jpy,
    Bitcoin_Fee,Bitcoin_Fee_Jpy,User_Country,User_State
) VALUES (
    ?,?,?,?,?,
    ?,?,?,?,?,
    ?,?,?,?,?,
    ?,?,?,?
)
");

my %seen; # key: "Id|Stamp|Index|Type|Money (rounded to 3 decimal digits)"
my $last_period;

$progress->target(~~@csv_files);
for my $csv_file (@csv_files) {
    open my $fh, "nauniq --num-entries 1000 $csv_file | "
        or die "Can't open $csv_file: $!";
    $progress->update(message => "Processing file '$csv_file'");

    my ($period) = $csv_file =~ /(\d{4}-\d{2})/;
    # we only check duplicates for csv files from the same month
    if ($last_period && $period ne $last_period) {
        %seen = ();
    }

    my $row = 0;
    my $format;
    while (<$fh>) {
        # the second format has 2 additional columns
        unless ($row++) {
            if (/User_Id_Hash/) { $format = 2 } else { $format = 1 }
            next;
        }

        s/\R//;

        my @f = split /,/,$_;
        if ($format == 1) { splice @f, 3, 0, "", "" }

        if (@f < 15) {
            warn "Corrupt record #".($.-1)." <17 columns ".(scalar @f)."), skipped: $_";
            next;
        }

        $f[15] = 0 if !defined($f[15]) || $f[15] eq ""; # some other user has Bitcoin_Fee=''
        $f[16] = 0 if !defined($f[16]) || $f[16] eq ""; # THK has Bitcoin_Fee_Jpy=''

        $f[17] //= undef;
        $f[18] //= undef;

        if (@f > 19) {
            warn "Corrupt record #".($.-1)." >19 columns (".(scalar @f)."), skipped: $_";
            next;
        }

        # remove quotes from the Stamp
        $f[1] =~ s/"//g;

        # set DELETED index to -1, THX to -2
        $f[2] = -1 if $f[2] eq "DELETED";
        $f[2] = -2 if $f[2] eq "TIBANNE_LIMITED_HK" || $f[2] eq "THK";

        # check type
        if ($f[6] ne "buy" and $f[6] ne "sell") {
            warn "Corrupt record #".($.-1)." type!=buy|sell ($f[6]), skipped: $_";
            next;
        }

        my $key = sprintf(
            "%s|%s|%s|%s|%.3f",
            $f[0], $f[1], $f[2], $f[6], $f[9],
        );
        if ($seen{$key}++) {
            warn "Duplicate record #".($.-1).", skipped: $_";
            next;
        }

        $sth->execute(@f);
    }

    $last_period = $period;
}
$progress->finish;
