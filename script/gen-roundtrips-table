#!/usr/bin/env perl

# Before running this script, you have to already run the import-* scripts and
# extra.sql. Also install the required CPAN modules.

use 5.010001;
use strict;
use warnings;
use FindBin '$Bin';
use Log::ger;
#use Log::ger::DBI::Query;

use DBIx::Connect::MySQL;
use IPC::System::Options 'readpipe', -log=>1;
use List::Util qw(sum);
use Perinci::CmdLine::Any;
use Progress::Any '$progress';
use Progress::Any::Output 'TermProgressBarColor', fh=>\*STDERR;

our %SPEC;

$SPEC{app} = {
    v => 1.1,
    args => {
        include_users => {
            summary => 'Only include specified user ID(s)',
            'x.name.is_plural' => 1,
            'x.name.singular' => 'include_user',
            schema => ['array*', of=>'posint*'],
            tags => ['category:testing'],
        },
    },
};
sub app {
    my %args = @_;

    my $dbh = DBIx::Connect::MySQL->connect(
        "dbi:mysql:database=mtgox", undef, undef, {RaiseError=>1});
    $dbh->do("SET time_zone = '+00:00'");

    log_trace "Creating table ...";
    $dbh->do("
CREATE TABLE IF NOT EXISTS _Round_Trip (
  _rowid INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
  `Index` INT NOT NULL, -- trader
  First_Tx_Stamp DATETIME NOT NULL,
  Last_Tx_Stamp DATETIME NOT NULL,
  Weighted_Avg_Begin_Stamp DATETIME NOT NULL,
  Weighted_Avg_End_Stamp DATETIME NOT NULL,
  Num_Tx INT NOT NULL,
  Num_Buys INT NOT NULL,
  Num_Sells INT NOT NULL,
  Total_Buy_Jpy DOUBLE NOT NULL,
  Realized_Gain DOUBLE NOT NULL
) ENGINE='MyISAM';
");

    my $sth_create = $dbh->prepare(<<'_');
INSERT INTO _Round_Trip (
  `Index`,First_Tx_Stamp,Last_Tx_Stamp,Weighted_Avg_Begin_Stamp,Weighted_Avg_End_Stamp,
  Num_Tx,Num_Buys,Num_Sells,Total_Buy_Jpy,Realized_Gain)
VALUES (
  ?,?,?,FROM_UNIXTIME(?),FROM_UNIXTIME(?),
  ?,?,?,?,?)
_

    log_trace "Selecting users ...";
    my %Users;
    my $sth = $dbh->prepare("SELECT `Index` FROM _Trade2_By_Index");
    $sth->execute;
    while (my @row = $sth->fetchrow_array) {
        if ($args{include_users}) {
            next unless grep {$_ eq $row[0]} @{ $args{include_users} };
        }
        $Users{$row[0]}++;
    }

    $progress->target(scalar keys %Users);

    my $i = 0;
    for my $idx (sort {$a<=>$b} keys %Users) {
        $i++;
        $progress->update(message => "Processing User #$idx", pos=>$i);
        my $sth = $dbh->prepare(<<_);
SELECT
  Type,
  Stamp,
  UNIX_TIMESTAMP(Stamp) Stamp_Unix,
  Money_Jpy,
  Bitcoins,
  Bitcoins_Change,
  Balance_Bitcoins,
  Tx_Realized_Gain,
  Avg_Purchase_Price
FROM _Trade2 t
WHERE
  `Index`=$idx
ORDER BY Stamp,_rowid
_
        $sth->execute;
        my $prev_bal;
        my $prev_avg_purchase_price;
        my (@tx_stamps, @buy_times, @sell_times, @buy_weights, @sell_weights);
        my $realized_gain = 0;
        my ($num_tx, $num_buys, $num_sells);
        while (my $row = $sth->fetchrow_hashref) {
            next unless $row->{Bitcoins};
            $num_tx++;
            #log_trace "TX #%d: %s", $num_tx, $row;
            if ($row->{Type} eq 'buy') {
                if ((!defined($prev_bal) || $prev_bal == 0)) {
                    # start of a new round-trip, user starts from zero balance and opens a position
                    $realized_gain = 0;
                    $num_tx = $num_buys = 1;
                    $num_sells = 0;
                    my $factor = $row->{Bitcoins_Change} / $row->{Bitcoins};
                    @tx_stamps    = ($row->{Stamp});
                    @buy_times    = ($row->{Stamp_Unix});
                    @buy_weights  = ($factor * $row->{Money_Jpy});
                    @sell_times   = ();
                    @sell_weights = ();
                } else {
                    $num_buys++;
                    my $factor = $row->{Bitcoins_Change} / $row->{Bitcoins};
                    push @tx_stamps  , $row->{Stamp};
                    push @buy_times  , $row->{Stamp_Unix};
                    push @buy_weights, $factor * $row->{Money_Jpy};
                }
            } else {
                if ($prev_bal) {
                    $realized_gain += $row->{Tx_Realized_Gain} // 0;
                    $num_sells++;
                    push @tx_stamps   , $row->{Stamp};
                    push @sell_times  , $row->{Stamp_Unix};
                    push @sell_weights, -$row->{Bitcoins_Change} * $prev_avg_purchase_price;
                    if ($row->{Balance_Bitcoins} == 0) {
                        # end of a round-trip, user sells all and makes balance zero
                        log_trace "ROUND-TRIP: User#$idx FROM $tx_stamps[0] TO $tx_stamps[-1]: ".($realized_gain > 0 ? "GAIN" : $realized_gain < 0 ? "LOSS" : "NEUTRAL");

                        my $wavg_buy_time =
                            sum(map {  $buy_times [$_]*$buy_weights [$_] } 0..$#buy_times) /
                            sum(@buy_weights);
                        my $wavg_sell_time =
                            sum(map { $sell_times[$_]*$sell_weights[$_] } 0..$#sell_times) /
                            sum(@sell_weights);

                        #log_trace "wavg_buy_time=<$wavg_buy_time>, wavg_sell_time=<$wavg_sell_time>";

                        $sth_create->execute(
                            $idx,
                            $tx_stamps[0],
                            $tx_stamps[-1],
                            $wavg_buy_time,
                            $wavg_sell_time,

                            $num_tx,
                            $num_buys,
                            $num_sells,
                            sum(@buy_weights),
                            $realized_gain,
                        );
                    }
                }
            }
            $prev_bal = $row->{Balance_Bitcoins};
            $prev_avg_purchase_price = $row->{Avg_Purchase_Price};
        }
    }
    $progress->finish;

    [200, "OK"];
}

Perinci::CmdLine::Any->new(
    url => '/main/app',
    log => 1,
    log_level => 'trace',
)->run;
